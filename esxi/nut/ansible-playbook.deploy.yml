---


- name: deploy
  vars:
    run_wsl: |
      ansible-playbook \
        --inventory $PWD/ansible-inventories \
        $PWD/../../../esxi/nut/ansible-playbook.deploy.yml
  vars_prompt:
    - name: vm_username
      prompt: "What is ESXi/vCenter server username?"
      private: no
      default: 
    - name: vm_password
      prompt: "What is ESXi/vCenter server password?"
      private: yes
      default: 
    - name: bundle_file
      prompt: "What is bundle file on local?"
      private: no
      default: /mnt/c/Users/xiaoyao9184/Downloads/NutClient-ESXi-2.8.0-2.4.1.x86_64.tar.gz
  hosts: esxi
  tasks: 

    - name: set ws
      include_tasks: "{{ playbook_dir }}/../../.seed/ansible-tasks/ws.set.yml"

    - name: set dir
      include_tasks: "{{ ws.local }}/.seed/ansible-tasks/dir.set.yml"

    - name: get name of bundle file
      ansible.builtin.set_fact:
        bundle:
          name: "{{ bundle_file | basename }}"
          path: "{{ bundle_file }}"

    - name: mkdir bundle on local
      delegate_to: localhost
      ansible.builtin.file:
        path: "{{ dir.local }}/.nut-client"
        state: directory

    - name: unarchive bundle on local
      delegate_to: localhost
      ansible.builtin.unarchive:
        src: "{{ bundle.path }}"
        dest: "{{ dir.local }}/.nut-client"

    - name: mkdir bundle on remote
      ansible.builtin.file:
        path: "{{ dir.remote }}/.nut-client"
        state: directory

    - name: copy bundle to remote
      ansible.builtin.copy:
        src: "{{ dir.local }}/.nut-client/"
        dest: "{{ dir.remote }}/.nut-client"

    - name: community software acceptance
      delegate_to: localhost
      community.vmware.vmware_host_acceptance:
        hostname: "{{ esxi.server.hostname }}"
        username: "{{ vm_username | default(esxi.server.username,true) }}"
        password: "{{ vm_password | default(esxi.server.password,true) }}"
        validate_certs: false
        esxi_hostname: '{{ esxi.server.hostname }}'
        acceptance_level: 'community'
        state: present

    # - name: change software acceptance
    #   ansible.builtin.shell: 
    #     cmd: "esxcli software acceptance set --level=CommunitySupported"

    # - name: get software acceptance
    #   ansible.builtin.shell: 
    #     cmd: "esxcli software acceptance get"
    #   register: acceptance_result

    # - name: print software acceptance
    #   ansible.builtin.pause:
    #     seconds: 1
    #     prompt: |
    #       {{ acceptance_result.stdout }}

    - name: install bundle
      ansible.builtin.shell: 
        cmd: "sh ./upsmon-install.sh"
        chdir: "{{ dir.remote }}/.nut-client"
      register: install_result

    - name: print bundle
      ansible.builtin.pause:
        seconds: 1
        prompt: |
          {{ install_result.stdout }}

    - name: set system advanced
      loop:
        - esxcli system settings advanced set -o "/UserVars/NutUpsName" --string-value "{{ esxi.nut.upsname | default('upsname@nutserver',true) }}"
        - esxcli system settings advanced set -o "/UserVars/NutUser" --string-value "{{ esxi.nut.user | default('upsuser',true) }}"
        - esxcli system settings advanced set -o "/UserVars/NutPassword" --string-value "{{ esxi.nut.password | default('upspassword',true) }}"
        - esxcli system settings advanced set -o "/UserVars/NutFinalDelay" --int-value "{{ esxi.nut.finaldelay | default(5,true) }}"
        - esxcli system settings advanced set -o "/UserVars/NutOnBatteryDelay" --int-value "{{ esxi.nut.onnatterydelay | default(0,true) }}"
        - esxcli system settings advanced set -o "/UserVars/NutSendMail" --int-value "{{ esxi.nut.sendmail | default(0,true) }}"
        - esxcli system settings advanced set -o "/UserVars/NutMailTo" --string-value "{{ esxi.nut.mailto | default('root@domain',true) }}"
        - esxcli system settings advanced set -o "/UserVars/NutMinSupplies" --int-value "{{ esxi.nut.minsupplies | default(1,true) }}"
      ansible.builtin.shell: 
        cmd: "{{ item }}"

    - name: start upsmon with on policy
      delegate_to: localhost
      community.vmware.vmware_host_service_manager:
        hostname: "{{ esxi.server.hostname }}"
        username: "{{ vm_username | default(esxi.server.username,true) }}"
        password: "{{ vm_password | default(esxi.server.password,true) }}"
        validate_certs: false
        esxi_hostname: '{{ esxi.server.hostname }}'
        service_name: NutClient
        service_policy: on
        state: present

    # - name: restart upsmon
    #   ansible.builtin.shell: 
    #     cmd: "/etc/init.d/upsmon restart"
    #   register: upsmon_result

    # - name: print upsmon
    #   ansible.builtin.pause:
    #     seconds: 1
    #     prompt: |
    #       {{ upsmon_result.stdout }}

    - name: test nut server
      ansible.builtin.shell: 
        cmd: "/opt/nut/bin/upsc {{ esxi.nut.upsname }}"
      register: upsc_result

    - name: print nut server
      ansible.builtin.pause:
        seconds: 1
        prompt: |
          {{ upsc_result.stdout }}

