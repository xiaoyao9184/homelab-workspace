---

- name: dispose
  vars:
    run_wsl: |
      ansible-playbook \
        --inventory $PWD/ansible-inventories \
        $PWD/../../../esxi/vm/vmdk/ansible-playbook.dispose.yml
  vars_prompt:
    - name: vm_username
      prompt: "What is ESXi/vCenter server username?"
      private: no
      default: 
    - name: vm_password
      prompt: "What is ESXi/vCenter server password?"
      private: yes
      default: 
    - name: vm_name
      prompt: "What is vm or group?"
      private: no
      default: vmdk
  hosts: localhost
  tasks: 

    - name: set ws
      include_tasks: "{{ playbook_dir }}/../../../.seed/ansible-tasks/ws.set.yml"

    - name: select vm name
      include_tasks: "{{ ws.local }}/.seed/ansible-tasks/var-grouped.select.yml"
      vars:
        grouped:
          var: "{{ esxi.group }}"
          select: "{{ vm_name }}"
          register: vm_group

    - name: select vm var
      include_tasks: "{{ ws.local }}/.seed/ansible-tasks/var-named.select.yml"
      vars:
        named:
          dict: "{{ esxi.vm }}"
          select: "{{ file_group }}"
          register: vm_list

    - name: set vm_guest_list
      ansible.builtin.set_fact:
        vm_guest_list: []

    - name: expand guest with absent
      loop: "{{ vm_list }}"
      loop_control:
        loop_var: vm_item
      when: 
        - vm_item.name is defined
      vars:
        guest_item: 
          name: "{{ vm_item.name }}"
          state: absent
          force: true
        vm_guest_combine: 
          guest: "{{ guest_item }}"
        vm_guest_item: "{{ vm_item | combine(vm_guest_combine, recursive=True) }}"
      ansible.builtin.set_fact:
        vm_guest_list: "{{ vm_guest_list + [vm_guest_item] }}"

    - debug: msg="{{ vm_guest_list }}"

    - include_tasks: "{{ playbook_dir }}/../../ansible-tasks/guest-list.set.yml"
      vars:
        list: "{{ vm_guest_list }}"

    - name: remove a virtual machine
      loop: "{{ guest_list }}"
      loop_control:
        loop_var: guest_item
      community.vmware.vmware_guest: "{{ guest_item }}"
      register: guest_result
      # 2 min
      async: 120
      poll: 0

    - name: wait task finished
      loop: "{{ guest_result.results }}"
      loop_control:
        loop_var: result
      ansible.builtin.async_status:
        jid: "{{ result.ansible_job_id }}"
        mode: status
      register: guest_async
      until: guest_async.finished
      # 2 min
      retries: 12
      delay: 10

    - debug: msg="{{ guest_async }}" verbosity=3

    