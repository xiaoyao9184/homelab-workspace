---


- name: node.register|set _node
  vars:
    wait_default:
      headscale:
        retries: 1
        delay: 0
        until:
          - container_loop_info.exists
          - container_loop_info.container.State.Running
    wait_update: "{{ node.wait | default({}) }}"
  ansible.builtin.set_fact:
    _node:
      ws: "{{ node.ws }}"
      wait: "{{ wait_default | combine(wait_update, recursive=True) }}"
      key_user: "{{ node.key_user }}"
      result: "{{ node.result | default('register_result') }}"

- name: node.register|wait container
  include_tasks: "{{ _node.ws.local }}/.seed/ansible-tasks/docker-container.wait.yml"
  vars:
    containers: "{{ _node.wait }}"

- name: node.register|print _node
  debug:
    var: _node

- name: node.register|register node
  loop: "{{ _node.key_user }}"
  when:
    - wait_result.exists
    - item.key | default(None,true) != None
  community.docker.docker_container_exec:
    container: "{{ wait_result.container_id }}"
    command: "headscale node register --key {{ item.key }} -u {{ item.user }}"
  register: exec_result

- name: node.register|set _node.result
  when:
    - exec_result is defined
    - exec_result.results is defined
  ansible.builtin.set_fact:
    "{{ _node.result }}": "{{ exec_result | json_query('results[].{key: item.key,user: item.user,result: stdout_lines[-1]}') }}"

- name: node.register|print _node.result
  debug:
    var: "{{ _node.result }}"

- name: node.register|reset _node
  ansible.builtin.set_fact:
    _node: !!null
