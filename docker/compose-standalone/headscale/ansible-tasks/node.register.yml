---


- name: node.register|set _node
  vars:
    wait_default:
      headscale:
        retries: 1
        delay: 0
        until:
          - container_loop_info.exists
          - container_loop_info.container.State.Running
    wait_update: "{{ node.wait | default({}) }}"
    exec_default:
      name: headscale
      command: []
      result: exec_result
    exec_update: "{{ node.exec | default({}) }}"
  ansible.builtin.set_fact:
    _node:
      ws: "{{ node.ws }}"
      wait: "{{ wait_default | combine(wait_update, recursive=True) }}"
      key_user: "{{ node.key_user }}"
      exec: "{{ exec_default | combine(exec_update, recursive=True) }}"
      result: "{{ node.result | default('register_result') }}"

- name: node.register|wait container
  include_tasks: "{{ _node.ws.local }}/.seed/ansible-tasks/docker-container.wait.yml"
  vars:
    containers: "{{ _node.wait }}"

- name: node.register|append _node.exec
  loop: "{{ _node.key_user }}"
  vars:
    command_list: "{{ _node.exec.command | default([],true) }}"
    command_item: "headscale node register --key {{ item.key }} -u {{ item.user }}"
    update:
      exec:
        command: "{{ command_list + [command_item] }}"
  ansible.builtin.set_fact:
    _node: "{{ _node | combine(update, recursive=True) }}"

- name: node.register|print _node
  debug:
    var: _node

- name: node.register|exec container
  include_tasks: "{{ _node.ws.local }}/.seed/ansible-tasks/docker-container.exec.yml"
  vars:
    container: "{{ _node.exec }}"

# exec_result results item is command
- name: node.register|set _node.result
  when:
    - exec_result is defined
    - exec_result.results is defined
  ansible.builtin.set_fact:
    "{{ _node.result }}": "{{ exec_result | json_query('results[].{key: item,value: stdout_lines[-1]}') | items2dict }}"

- name: node.register|print _node.result
  debug:
    var: "{{ _node.result }}"

- name: node.register|reset _node
  ansible.builtin.set_fact:
    _node: !!null
