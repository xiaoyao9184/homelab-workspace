---


- name: user.create|set _user
  vars:
    wait_default:
      headscale:
        retries: -1
        delay: 0
        until:
          - container_loop_info.exists
          - container_loop_info.container.State.Running
    wait_update: "{{ user.wait | default({}) }}"
    exec_default:
      name: headscale
      command: []
      result: exec_result
    exec_update: "{{ user.exec | default({}) }}"
  ansible.builtin.set_fact:
    _user:
      ws: "{{ user.ws }}"
      wait: "{{ wait_default | combine(wait_update, recursive=True) }}"
      name: "{{ user.name | default(['default']) }}"
      exec: "{{ exec_default | combine(exec_update, recursive=True) }}"
      result: "{{ user.result | default('create_result') }}"

- name: user.create|wait container
  include_tasks: "{{ _user.ws.local }}/.seed/ansible-tasks/docker-container.wait.yml"
  vars:
    containers: "{{ _user.wait }}"

- name: user.create|append _user.exec
  loop: "{{ _user.name }}"
  vars:
    command_list: "{{ _user.exec.command | default([],true) }}"
    command_item: "headscale user create {{ item }}"
    update:
      exec:
        command: "{{ command_list + [command_item] }}"
  ansible.builtin.set_fact:
    _user: "{{ _user | combine(update, recursive=True) }}"

- name: user.create|print _user
  debug:
    var: _user

- name: apikey.expire|exec container
  include_tasks: "{{ _user.ws.local }}/.seed/ansible-tasks/docker-container.exec.yml"
  vars:
    container: "{{ _user.exec }}"

# exec_result results item is command
- name: user.create|set _user.result
  when:
    - exec_result is defined
    - exec_result.results is defined
  ansible.builtin.set_fact:
    "{{ _user.result }}": "{{ exec_result | json_query('results[].{key: item,value: stdout_lines[-1]}') | items2dict }}"

- name: user.create|print _user.result
  debug:
    var: "{{ _user.result }}"

- name: user.create|reset _user
  ansible.builtin.set_fact:
    _user: !!null
