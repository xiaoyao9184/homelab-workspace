---

- name: cert.deploy|set _cert
  vars:
    wait_default:
      tailscale:
        retries: 1
        delay: 0
        until:
          - container_loop_info.exists
          - container_loop_info.container.State.Running
    wait_update: "{{ cert.wait | default({}) }}"
    exec_default:
      name: tailscale
      command: "tailscale cert {{ cert.domain }}"
      result: exec_result
    exec_update: "{{ config.exec | default({}) }}"
  ansible.builtin.set_fact:
    _cert:
      ws: "{{ cert.ws }}"
      dir: "{{ cert.dir }}"
      wait: "{{ wait_default | combine(wait_update, recursive=True) }}"
      exec: "{{ exec_default | combine(exec_update, recursive=True) }}"
      result: "{{ cert.result | default('create_result') }}"

- name: cert.deploy|wait container
  include_tasks: "{{ _cert.ws.local }}/.seed/ansible-tasks/docker-container.wait.yml"
  vars:
    containers: "{{ _cert.wait }}"

- name: cert.deploy|print _cert
  debug:
    var: _cert

- name: cert.deploy|exec container
  include_tasks: "{{ _cert.ws.local }}/.seed/ansible-tasks/docker-container.exec.yml"
  vars:
    container: "{{ _cert.exec }}"

- name: cert.deploy|set _cert.result
  when:
    - exec_result is defined
    - exec_result.stdout is defined
  ansible.builtin.set_fact:
    "{{ _cert.result }}": "{{ exec_result.stdout_lines[-1] }}"

- name: cert.deploy|print _cert.result
  debug:
    var: "{{ _cert.result }}"

- name: cert.deploy|reset _cert
  ansible.builtin.set_fact:
    _cert: !!null
