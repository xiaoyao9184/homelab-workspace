---

- name: deploy
  vars:
    run_wsl: |
      ansible-playbook \
        --inventory $PWD/ansible-inventories \
        $PWD/../../../docker/compose-standalone/tailscale/ansible-playbook.deploy.yml
  environment:
    PATH: "{{ ansible_env.PATH }}:{{ env_path | default('') }}"
  hosts: "{{ 'docker:&docker-tailscale-node' if (groups['docker-tailscale-node'] is defined) else 'docker' }}"
  run_once: true
  tasks: 

    - name: set ws
      include_tasks: "{{ playbook_dir }}/../../../.seed/ansible-tasks/ws.set.yml"

    - name: set dir
      include_tasks: "{{ ws.local }}/.seed/ansible-tasks/dir.set.yml"

    - name: copy dir
      include_tasks: "{{ ws.local }}/.seed/ansible-tasks/dir.copy.yml"

    - name: build env_file
      include_tasks: "{{ ws.local }}/.seed/ansible-tasks/docker-env.create.yml"
      vars:
        env: 
          dest: "{{ dir.remote }}/external_env-all.env"
          data: "{{ tailscale.env | default([],true) }}"

    - name: add compose service
      include_tasks: "{{ ws.local }}/.seed/ansible-tasks/docker-compose.add.yml"
      vars:
        compose:
          type: compose
          name: "{{ dir.names[0] }}"
          path: "{{ dir.remote }}"
          files: 
            - "docker-compose.yml"

    - name: exec service
      when: tailscale.up.authkey is defined
      include_tasks: "{{ ws.local }}/.seed/ansible-tasks/docker-service.exec.yml"
      vars:
        service:
          type: compose
          name: tailscale
          project: "{{ dir.names[0] }}"
          command: "tailscale up --authkey={{ tailscale.up.authkey }} --advertise-exit-node"
          result: exe_result