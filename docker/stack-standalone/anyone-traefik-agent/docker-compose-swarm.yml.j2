version: "3.8"

networks:
  traefik:
    name: external_net-traefik
    external: true
{# {% for key, value in VARS.NETWORKS.items() %}
  {{ key }}:
    name: {{ value.name }}
{% if value.external is defined %}
    external: {{ value.external | lower }}
{% endif %}
{% endfor %} #}

services:
  traefik-proxy:
    hostname: traefik
    image: traefik:v2.8
    command:
      # Enable Hub communication (open the port 9900 and 9901 by default)
      - --experimental.hub=true
      - --hub.tls.insecure=true
      - --metrics.prometheus.addrouterslabels=true
    networks:
      - traefik
{% for name in VARS.NETWORKS.keys() %}
      - {{ name }}
{% endfor %}
    healthcheck:
      test: nc -z localhost 9901 && nc -z localhost 9901 || exit 1
      interval: 60s
      timeout: 5s
      retries: 10
      start_period: 10m
    deploy:
      endpoint_mode: vip
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.platform.os == linux
        preferences:
          - spread: node.platform.os
      labels:
        "com.docker.stack.namespace": seed
      # resources:
      #   limits:
      #     cpus: '4'
      #     memory: 4096M
      #   reservations:
      #     cpus: '1'
      #     memory: 2048M
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 2
        window: 60s
      rollback_config:
        parallelism: 0
        delay: 0s
        failure_action: pause
        monitor: 5m
        max_failure_ratio: 0
        order: stop-first
      update_config:
        parallelism: 0
        delay: 0s
        failure_action: rollback
        monitor: 5m
        max_failure_ratio: 0
        order: stop-first

  hub-agent:
    hostname: hub-agent
    image: ghcr.io/traefik/hub-agent-traefik:v1.0.0
    command:
      - run
      - --hub.token={{ VARS.TOKEN }}
      - --auth-server.advertise-url=http://hub-agent
      - --traefik.host=traefik
      - --traefik.tls.insecure=true
      - --traefik.docker.swarm-mode
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - traefik
    deploy:
      endpoint_mode: vip
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.platform.os == linux
        preferences:
          - spread: node.platform.os
      labels:
        "com.docker.stack.namespace": seed
      # resources:
      #   limits:
      #     cpus: '4'
      #     memory: 4096M
      #   reservations:
      #     cpus: '1'
      #     memory: 2048M
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 2
        window: 60s
      rollback_config:
        parallelism: 0
        delay: 0s
        failure_action: pause
        monitor: 5m
        max_failure_ratio: 0
        order: stop-first
      update_config:
        parallelism: 0
        delay: 0s
        failure_action: rollback
        monitor: 5m
        max_failure_ratio: 0
        order: stop-first
