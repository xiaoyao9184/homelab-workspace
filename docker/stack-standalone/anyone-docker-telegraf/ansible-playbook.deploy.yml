---

- name: deploy
  vars:
    run_wsl: |
      ansible-playbook \
        --inventory $PWD/ansible-inventories \
        $PWD/../../../docker/stack-standalone/anyone-docker-telegraf/ansible-playbook.deploy.yml
  vars_prompt:
    - name: service_names
      prompt: "What is service name(same as config file name WITHOUT extension in inventory_dir/telegraf)?"
      private: no
      default: 
  environment:
    PATH: "{{ ansible_env.PATH }}:{{ env_path | default('') }}"
  hosts: docker-manager
  run_once: true
  tasks: 

    - name: set ws
      include_tasks: "{{ playbook_dir }}/../../../.seed/ansible-tasks/ws.set.yml"

    - name: set dir
      include_tasks: "{{ ws.local }}/.seed/ansible-tasks/dir.set.yml"

    - name: add swarm label
      include_tasks: "{{ ws.local }}/.seed/ansible-tasks/docker-label.add.yml"
      vars:
        labels: "{{ telegraf.lab | default([],true) }}"

    - name: stat docker group
      ansible.builtin.stat:
        path: /var/run/docker.sock
      register: docker_stat

    - name: default service_names
      when: service_names == ''
      block:

        - name: list config_files
          include_tasks: "{{ ws.local }}/.seed/ansible-tasks/file-name.list.yml"
          vars:
            name: 
              option_find: "{{ inventory_dir }}/../telegraf/service"
              result_var: config_files
              location: local

        - name: set service_names
          ansible.builtin.set_fact:
            service_names: "{{ config_files | map('basename') | map('splitext') | map('first') | join(',') }}"

    - name: set service_name_list
      ansible.builtin.set_fact:
        service_name_list: "{{ service_names.split(',') }}"
        dir_copy_list: "[] + {{ telegraf.dir_copy | default([],true) }}" 
        cfg_list: []
        net_list: "{{ telegraf.net | default([],true) }}"
        env_list: []
        template_list: []

    - name: add service_name_list
      ansible.builtin.set_fact:
        dir_copy_list: "{{ dir_copy_list + [dir_copy] }}"
        cfg_list: "{{ cfg_list + [cfg] }}"
        template_list: "{{ template_list + [template] }}"
      vars:
        dir_copy:
          - src: "{{ inventory_dir }}/../telegraf/service/{{ name }}.conf"
            dest: "{{ dir.remote }}/config/{{ name }}.conf"
        cfg:
          - name: "external_cfg-telegraf-conf-{{ name }}"
            file: "{{ dir.remote }}/config/{{ name }}.conf"
        env:
          - dest: "{{ dir.remote }}/docker-compose/external_env-{{ name }}.env"
            data: "{{ telegraf.env | default([],true) }}"
        template:
          name: "{{ name }}"
          opt:
            src: "{{ dir.local }}/docker-compose-swarm.yml.j2"
            dest: "{{ dir.remote }}/docker-compose-swarm/{{ name }}.yml"
          vars:
            SERIVCE_NAME: "{{ name }}"
            HOMENAME: "{{ ansible_hostname }}"
            USR_GROUP: "{{ docker_stat.stat.gid }}"
      loop: "{{ service_name_list }}"
      loop_control:
        loop_var: name

    - name: copy dir
      include_tasks: "{{ ws.local }}/.seed/ansible-tasks/dir.copy.yml"
      vars:
        copys: "{{ dir_copy_list | flatten }}"

    - name: add external_cfg
      include_tasks: "{{ ws.local }}/.seed/ansible-tasks/docker-configs.add.yml"
      vars:
        configs: "{{ cfg_list | default(_default,true) | flatten }}"
    
    - name: add external_net
      include_tasks: "{{ ws.local }}/.seed/ansible-tasks/docker-networks.add.yml"
      vars:
        _default:
          external_net-influxdb:
            driver: overlay
            attachable: true
        networks: "{{ net_list | default(_default,true) | flatten }}"

    - name: build env_file
      include_tasks: "{{ ws.local }}/.seed/ansible-tasks/docker-envs.create.yml"
      vars:
        envs: "{{ env_list | flatten }}"

    - name: mkdir for serivce
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ dir.remote }}/docker-compose-swarm"

    - name: add compose service
      include_tasks: "{{ ws.local }}/.seed/ansible-tasks/docker-compose.add.yml"
      vars:
        compose:
          type: stack
          name: "{{ dir.names[0] }}"
          path: "{{ dir.remote }}/docker-compose-swarm"
          # files: 
          #   - "docker-compose-swarm.yml"
          template: "{{ template_list }}"
