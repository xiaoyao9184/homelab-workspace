---

- name: deploy
  vars:
    run_wsl: |
      ansible-playbook \
        --inventory $PWD/ansible-inventories \
        $PWD/../../../docker/stack-standalone/anyone-domoticz-domoticz/ansible-playbook.deploy.yml
  environment:
    PATH: "{{ ansible_env.PATH }}:{{ env_path | default('') }}"
  hosts: "{{ 'docker:&docker-domoticz-node' if (groups['docker-domoticz-node'] is defined) else 'docker' }}"
  tasks:

    - name: set ws
      include_tasks:
        file: "{{ playbook_dir }}/../../../.seed/ansible-tasks/ws.set.yml"
        # https://github.com/ansible/ansible/issues/72099
        apply:
          run_once: true

    - name: set dir
      include_tasks:
        file: "{{ ws.local }}/.seed/ansible-tasks/dir.set.yml"
        apply:
          run_once: true

    - name: copy to dir
      include_tasks: "{{ ws.local }}/.seed/ansible-tasks/dirs.copy.yml"
      vars:
        dirs:
          sync:
            - src: "{{ dir.remote }}/docker-compose-swarm.yml"
              dest: "{{ dir.remote }}/docker-compose-swarm.yml"
              delegate_to: "{{ groups['docker-manager'] | first }}"
              run_once: true
          cp: "{{ domoticz.dir_copy | default([],true) }}"

    - name: wait nfs mount
      when: 
        # BUG default never use
        - "'nfs-client' in group_names"
        - domoticz.nfs_wait is defined
      include_tasks: "{{ ws.local }}/.seed/ansible-tasks/nfs-mount.wait.yml"
      vars:
        _default:
          on_manager:
            point: "/domoticz-userdata"
            mount: "/mnt/nfs/domoticz-userdata"
            option: "vers=4,loud,rw,sync"
            unmount: true
            retry: 5
        wait_nfs: "{{ domoticz.nfs_wait | default(_default) }}"

    - name: add external_vol
      include_tasks: "{{ ws.local }}/.seed/ansible-tasks/docker-volumes.add.yml"
      vars:
        default:
          external_vol-domoticz-userdata:
            driver: local
        volumes: "{{ domoticz.vol | default(default,true) }}"

    # - name: add external_net
    #   include_tasks: "{{ ws.local }}/.seed/ansible-tasks/docker-networks.add.yml"
    #   vars:
    #     networks: "{{ domoticz.net | default([],true) }}"

    # - name: add external_cfg
    #   include_tasks: "{{ ws.local }}/.seed/ansible-tasks/docker-configs.add.yml"
    #   vars:
    #     configs: "{{ domoticz.cfg | default([],true) }}"

    # - name: add external_sec
    #   include_tasks: "{{ ws.local }}/.seed/ansible-tasks/docker-secrets.add.yml"
    #   vars:
    #     secrets: "{{ domoticz.sec | default([],true) }}"


- name: deploy
  environment:
    PATH: "{{ ansible_env.PATH }}:{{ env_path | default('') }}"
  hosts: docker-manager
  run_once: true
  tasks: 

    - name: set ws
      when: ws is undefined
      include_tasks: "{{ playbook_dir }}/../../../.seed/ansible-tasks/ws.set.yml"

    - name: set dir
      when: dir is undefined
      include_tasks: "{{ ws.local }}/.seed/ansible-tasks/dir.set.yml"

    - name: add swarm label
      include_tasks: "{{ ws.local }}/.seed/ansible-tasks/docker-label.add.yml"
      vars:
        labels: "{{ domoticz.lab | default([],true) }}"

    - name: build env_file
      include_tasks: "{{ ws.local }}/.seed/ansible-tasks/docker-env.create.yml"
      vars:
        env:
          dest: "{{ dir.remote }}/external_env-all.env"
          data: "{{ domoticz.env | default([],true) }}"

    - name: add stack service
      include_tasks: "{{ ws.local }}/.seed/ansible-tasks/docker-compose.add.yml"
      vars:
        compose:
          type: stack
          name: "{{ dir.names[0] }}"
          path: "{{ dir.remote }}"
          files: 
            - "docker-compose-swarm.yml"


- name: deploy
  environment:
    PATH: "{{ ansible_env.PATH }}:{{ env_path | default('') }}"
  hosts: "{{ 'docker:&docker-domoticz-node' if (groups['docker-domoticz-node'] is defined) else 'docker' }}"
  tasks: 

    - name: wait host port
      include_tasks:
        file: "{{ ws.local }}/.seed/ansible-tasks/host-port.wait.yml"
        apply:
          run_once: true
      vars:
        wait_name: "{{ dir.names | join('_') }}"
        wait_network:
          - external_net-domoticz
        wait_port: 
          domoticz: 80

    - name: lookup service
      include_tasks: "{{ _apikey.ws.local }}/.seed/ansible-tasks/docker-service.lookup.yml"
      vars:
        service: 
          name: "domoticz"
          namespace: "{{ dir.names | join('_') }}"
          retries: 1
          delay: 0
          result: "lookup_result"

    - name: exec in domoticz
      loop: "{{ domoticz.exec | default([],true) }}"
      when:
        - lookup_result.exists
      include_tasks: "{{ ws.local }}/.seed/ansible-tasks/docker-service.exec.yml"
      vars:
        service:
          name: "domoticz"
          namespace: "{{ dir.names | join('_') }}"
          # https://stackoverflow.com/questions/59701804/obtain-shared-runners-token-gitlab-api
          command: "{{ item }}"
          result: "domoticz_exec"
