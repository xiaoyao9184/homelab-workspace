---



- name: docker-service.exec|set _service
  ansible.builtin.set_fact:
    _service: 
      type: "{{ service.type | default('stack') }}"
      name: "{{ service.name }}"
      command: "{{ service.command | regex_replace('\\\\\\\n') }}"
      result: "{{ service.result }}"

- name: docker-service.exec|set _filter stack
  when: _service.type == 'stack'
  ansible.builtin.set_fact:
    _filter: "label=com.docker.swarm.service.name={{ _service.name }}"

- name: docker-service.exec|set _filter compose 
  when: _service.type == 'compose'
  ansible.builtin.set_fact:
    _filter: "label=com.docker.compose.service={{ _service.name }}"

- name: docker-service.exec|get container id
  when: _service.name is defined
  shell: "docker ps -q -f {{ _filter }} | head -1"
  register: _container_id
  until: 
    - _container_id is not failed
    - _container_id.stdout != ''
  retries: 1000
  delay: 10
  
- name: docker-service.exec|set _service.container_id
  when: _container_id is defined
  ansible.builtin.set_fact:
    _service: "{{ _service | combine(update, recursive=True) }}"
  vars:
    update:
      container_id: "{{ _container_id.stdout }}"

- name: docker-service.exec|print _service
  debug:
    var: _service

- name: docker-service.exec|exec container command
  community.docker.docker_container_exec:
    container: "{{ _service.container_id }}"
    command: "{{ _service.command }}"
  register: "_service_result"

- name: docker-service.exec|set _service.result
  ansible.builtin.set_fact:
    "{{ _service.result }}": "{{ _service_result.stdout }}"

- name: docker-service.exec|reset _service
  ansible.builtin.set_fact:
    _container_id: !!null
    _filter: !!null
    _service: !!null