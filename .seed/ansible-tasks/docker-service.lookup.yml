---


- name: docker-service.lookup|set _service
  ansible.builtin.set_fact:
    _service: 
      type: "{{ service.type | default('stack') }}"
      name: "{{ service.name }}"
      project: "{{ service.project | default('NONE') }}"
      namespace: "{{ service.namespace | default('NONE') }}"
      retries: "{{ service.retries | default(1000) }}"
      delay: "{{ service.delay | default(10) }}"
      result: "{{ service.result }}"

- name: docker-service.lookup|print _service
  debug:
    var: _service

- name: docker-service.lookup|set _filter stack
  when: _service.type == 'stack'
  ansible.builtin.set_fact:
    _filter: 
      - "label=com.docker.stack.namespace={{ _service.namespace }}"
      - "label=com.docker.swarm.service.name={{ _service.namespace }}_{{ _service.name }}"

- name: docker-service.lookup|set _filter compose 
  when: _service.type == 'compose'
  ansible.builtin.set_fact:
    _filter: 
      - "label=com.docker.compose.project={{ _service.project }}"
      - "label=com.docker.compose.service={{ _service.name }}"

- block:

    - name: docker-service.lookup|get container id
      when: _service.name is defined
      shell: "docker ps -q -f {{ _filter | join(' -f ') }} | head -1"
      register: _container_id
      until: 
        - _container_id is not failed
        - _container_id.stdout != ''
      retries: "{{ _service.retries }}"
      delay: "{{ _service.delay }}"

    - name: docker-service.lookup|set _service.result
      ansible.builtin.set_fact:
        "{{ _service.result }}":
          exists: "{{ _container_id is defined }}"
          container_id: "{{ _container_id.stdout }}"

  rescue:

    - name: docker-service.lookup|fail _service.result
      ansible.builtin.set_fact:
        "{{ _service.result }}":
          exists: "{{ _container_id is defined }}"

- name: docker-service.lookup|reset _service
  ansible.builtin.set_fact:
    _container_id: !!null
    _filter: !!null
    _service: !!null