---


- name: docker-config.rm|not loop
  when: config.key is undefined
  block:

    - name: docker-config.rm|set _cfg from config
      ansible.builtin.set_fact:
        _cfg: "{{ config }}"
        # BUG? When different variable in loop include_tasks, run_once set_fact will set all host fact
        _cfgs_manager: []

- name: docker-config.rm|in loop
  when: config.key is defined
  block:

    - name: docker-config.rm|set _cfg from config.value
      ansible.builtin.set_fact:
        _cfg: "{{ config.value | default({},true) }}"
        # BUG? When different variable in loop include_tasks, run_once set_fact will set all host fact
        _cfgs_manager: []

    - name: docker-config.rm|combine _cfg.name form config.key
      when: _cfg.name is undefined
      vars:
        update:
          name: "{{ config.key }}"
      ansible.builtin.set_fact:
        _cfg: "{{ _cfg | combine(update, recursive=True) }}"

# Merge multiple docker nodes '_cfg' variables when is swarm config
- name: docker-config.rm|append swarm _cfgs_manager from each docker host
  run_once: true
  loop: "{{ groups['docker'] }}"
  loop_control:
    loop_var: hostitem
  vars:
    list: "{{ _cfgs_manager | default([],true) }}"
    append: "{{ [hostvars[hostitem]._cfg] if (hostvars[hostitem]._cfg | default(None,true) != None) else [] }}"
  ansible.builtin.set_fact:
    _cfgs_manager: "{{ (list + append) | unique }}"

- name: docker-config.rm|print config
  run_once: true
  ansible.builtin.debug:
    var: _cfgs_manager

- name: docker-config.rm|remove config
  run_once: true
  delegate_to: "{{ groups['docker-manager'] | first }}"
  loop: "{{ _cfgs_manager }}"
  loop_control:
    loop_var: config
  community.docker.docker_config:
    state: absent
    name: "{{ config.name }}"

- name: docker-config.rm|reset _cfg
  ansible.builtin.set_fact:
    _cfg: !!null
    _cfgs_manager: !!null
