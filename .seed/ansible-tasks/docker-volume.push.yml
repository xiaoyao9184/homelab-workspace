---


- name: docker-volume.push|set _volume from volume
  when: volume.key is undefined
  vars:
    other_keys: ['name','loop']
    copy_keys: "{{ volume.keys() | difference(other_keys) }}"
    copy_values: "{{ copy_keys | map('extract', volume) | list }}"
  ansible.builtin.set_fact:
    _volume:
      name: "{{ volume.name }}"
      loop: "{{ volume.loop | default(true) }}"
      cp: "{{ dict(copy_keys | zip(copy_values)) }}"
      pushed: false

- name: docker-volume.push|set _volume from volume.key volume.value
  when: volume.key is defined
  vars:
    other_keys: ['name','loop']
    copy_keys: "{{ volume.value.keys() | difference(other_keys) }}"
    copy_values: "{{ copy_keys | map('extract', volume.value) | list }}"
  ansible.builtin.set_fact:
    _volume:
      name: "{{ volume.key }}"
      loop: "{{ volume.value.loop | default(true) }}"
      cp: "{{ dict(copy_keys | zip(copy_values)) }}"
      pushed: false

- name: docker-volume.push|print volume
  ansible.builtin.debug:
    var: _volume

- name: docker-volume.push|loop volume
  when: _volume.loop | bool
  vars:
    volume:
      name: "{{ _volume.name }}"
      retries: -1
      delay: 0
  include_tasks: docker-volume.loop.yml

- name: docker-volume.push|info volume
  community.docker.docker_volume_info:
    name: "{{ _volume.name }}"
  register: _volume_info

- name: docker-volume.push|print info
  ansible.builtin.debug:
    var: _volume_info

- when:
    - _volume_info.exists
    - _volume_info.volume.Driver | default('NONE') == 'local'
    - _volume_info.volume.Options.type | default('NONE') == 'none'
    - _volume_info.volume.Options.o | default('NONE') == 'bind'
  block:

    - name: docker-volume.push|direct-mode|set bind copy
      vars:
        dest: "{{ _volume_info.volume.Options.device }}/{{ _volume.cp.dest }}"
        update:
          dest: "{{ dest }}"
      ansible.builtin.set_fact:
        _volume_bind_copy: "{{ _volume.cp | combine(update, recursive=True) }}"

    - name: docker-volume.push|direct-mode|print bind copy
      ansible.builtin.debug:
        var: _volume_bind_copy

    - name: docker-volume.push|direct-mode|copy to bind
      ansible.builtin.copy: "{{ _volume_bind_copy }}"
      # fail when on wsl but copy done
      ignore_errors: true

    - name: docker-volume.push|direct-mode|update _volume.pushed
      vars:
        update:
          pushed: true
      ansible.builtin.set_fact:
        _volume: "{{ _volume | combine(update, recursive=True) }}"
        _volume_bind_copy: !!null

- when:
    - _volume_info.exists
    - not (_volume.pushed | default(false) | bool)
  block:

    - when: not ( _volume.cp.remote_src | default(false) | bool )
      block:

        - name: docker-volume.push|container-mode|from-control|init ws
          when: ws is undefined
          include_tasks: ws.set.yml

        - name: docker-volume.push|container-mode|from-control|init dir
          when: dir is undefined
          include_tasks: dir.set.yml

        # - name: docker-volume.push|container-mode|from-control|empty temporary path
        #   vars:
        #     temporary_dir: "{{ dir.remote | default(ws.remote) }}/.vol/{{ _volume.name }}"
        #   ansible.builtin.file:
        #     path: "{{ temporary_dir }}/"
        #     state: absent

        - name: docker-volume.push|container-mode|from-control|mkdir temporary
          vars:
            temporary_dir: "{{ dir.remote | default(ws.remote) }}/.vol/{{ _volume.name }}"
          ansible.builtin.file:
            path: "{{ temporary_dir }}"
            state: directory

        - name: docker-volume.push|container-mode|from-control|set temporary copy
          vars:
            temporary_dir: "{{ dir.remote | default(ws.remote) }}/.vol/{{ _volume.name }}"
            dest_relative: "/{{ _volume.cp.dest | default('',true) }}"
            dest: "{{ temporary_dir  }}{{ '' if (_volume.cp.dest | default('',true) == '') else dest_relative }}"
            update:
              dest: "{{ dest }}"
          ansible.builtin.set_fact:
            _volume_temporary_copy: "{{ _volume.cp | combine(update, recursive=True) }}"

        - name: docker-volume.push|container-mode|from-control|print temporary copy
          ansible.builtin.debug:
            var: _volume_temporary_copy

        - name: docker-volume.push|container-mode|from-control|copy to temporary
          ansible.builtin.copy: "{{ _volume_temporary_copy }}"
          register: _volume_temporary_copy_result

        - name: docker-volume.push|container-mode|from-control|set container copy
          vars:
            temporary_dir: "{{ dir.remote | default(ws.remote) }}/.vol/{{ _volume.name }}"
            src_relative: "/{{ _volume.cp.dest | default('',true) }}"
            src_empty_dest: "{{ '/.' if (_volume.cp.dest | default('',true) == '') else src_relative }}"
            src_content_src: "{{ '/.' if (_volume.cp.src is regex('\/$')) else src_empty_dest }}"
            src: "{{ temporary_dir  }}{{ src_content_src }}"
            # empty dest mean use parent-path
            dest_relative: "/{{ _volume.cp.dest | default('',true) }}"
            dest: "/seed_vol{{ '' if (_volume.cp.dest | default('',true) == '') else dest_relative }}"
          ansible.builtin.set_fact:
            _volume_container_copy:
              src: "{{ src }}"
              dest: "{{ dest }}"
            _volume_temporary_copy: !!null
            _volume_temporary_copy_result: !!null

    - when: _volume.cp.remote_src | default(false) | bool
      block:

        - name: docker-volume.push|container-mode|from-remote|set container copy
          vars:
            # ansible copy src multi-item '/tmp/dir/' to docker cp SRC_PATH '/tmp/dir/.'
            src: "{{ _volume.cp.src }}{{ '.' if (_volume.cp.src is regex('\/$')) else '' }}"
            # empty dest mean use parent-path
            dest_relative: "/{{ _volume.cp.dest | default('',true) }}"
            dest: "/seed_vol{{ '' if (_volume.cp.dest | default('',true) == '') else dest_relative }}"
          ansible.builtin.set_fact:
            _volume_container_copy:
              src: "{{ src }}"
              dest: "{{ dest }}"

    - name: docker-volume.push|container-mode|print container copy
      ansible.builtin.debug:
        var: _volume_container_copy

    - name: docker-volume.push|container-mode|start volume container
      community.docker.docker_container:
        name: "{{ _volume.name }}"
        state: started
        image: alpine
        command: "tail -f /dev/null"
        volumes:
          - "{{ _volume.name }}:/seed_vol"
        labels:
          "com.docker.stack.namespace": seed
          "com.github.xiaoyao9184.docker-seed.type": "docker-volume.push"
          "com.github.xiaoyao9184.docker-seed.creator": "{{ lookup('ansible.builtin.env', 'SEED_NAME') | default('docker-volume.push',true) }}"
      register: result_vol_container
      until: "result_vol_container is not failed"
      retries: 3
      delay: 10

    - name: docker-volume.push|container-mode|stat src when src one-item
      when: 
        - not ( _volume_container_copy.src is regex('\/\.$') )
      ansible.builtin.stat:
        path: "{{ _volume_container_copy.src }}"
      register: _volume_src_stat

    - name: docker-volume.push|container-mode|set mkdir mode when dest parent-path
      when: 
        - _volume.cp.directory_mode is defined 
        - _volume_container_copy.dest is regex('\/$')
      ansible.builtin.set_fact:
        _volume_mkdir_mode: "{{  _volume.cp.directory_mode }}"

    - name: docker-volume.push|container-mode|mkdir dest when dest is parent-path or src is dir-item
      loop:
        # when dest endwith '/' mean parent-path
        - "{{ _volume_container_copy.dest is regex('\/$') }}"
        # when src is dir mean dest is parent-path
        - "{{ _volume_src_stat.stat.isdir | default(true) }}"
      vars:
        mode: "-m {{ _volume_mkdir_mode | default('0777',true) }}"
        mode_opt: "{{ mode if( _volume_mkdir_mode is defined) else '' }}"
      when: item
      community.docker.docker_container_exec:
        container: "{{ _volume.name }}"
        command: "mkdir {{ mode_opt }} -p {{ _volume_container_copy.dest }}"

    - name: docker-volume.push|container-mode|copy to container
      ansible.builtin.shell: "docker cp {{ _volume_container_copy.src }} {{ _volume.name }}:{{ _volume_container_copy.dest }}"

    - when:
        - not ( _volume_container_copy.src is regex('\/\.$') )
      block:

        - name: docker-volume.push|container-mode|test dest is dir when src one-item
          community.docker.docker_container_exec:
            container: "{{ _volume.name }}"
            command: "test -d {{ _volume_container_copy.dest }}"
          register: _volume_dest_test
          ignore_errors: true

        - name: docker-volume.push|container-mode|set mode file when src one-item
          vars:
            filename: "/{{ (_volume_src_stat.stat.path | default('',true) | basename) }}"
          ansible.builtin.set_fact:
            _volume_mode_file: "{{ _volume_container_copy.dest }}{{ filename if(_volume_dest_test is success) else '' }}"

    - name: docker-volume.push|container-mode|set mode file when src multi-item
      when:
        - _volume_container_copy.src is regex('\/\.$')
      ansible.builtin.set_fact:
        _volume_mode_file: "{{ _volume_container_copy.dest }}"

    - name: docker-volume.push|container-mode|mode file when defined
      when:
        - _volume.cp.mode is defined
        - _volume_mode_file is defined
      community.docker.docker_container_exec:
        container: "{{ _volume.name }}"
        command: "chmod {{ _volume.cp.mode }} {{ _volume_mode_file }}"

    - name: docker-volume.push|container-mode|tree dest
      community.docker.docker_container_exec:
        container: "{{ _volume.name }}"
        command: "sh -c \"tree {{ _volume_container_copy.dest }}; ls -lah {{ _volume_container_copy.dest }}\""
      register: result_copy_container

    - name: docker-volume.push|container-mode|print dest
      ansible.builtin.pause:
        seconds: 1
        prompt: |
          {{ result_copy_container.stdout }}

    - name: docker-volume.push|container-mode|stop volume container
      community.docker.docker_container:
        name: "{{ _volume.name }}"
        state: stopped

    - name: docker-volume.push|container-mode|update _volume.pushed
      vars:
        update:
          pushed: true
      ansible.builtin.set_fact:
        _volume: "{{ _volume | combine(update, recursive=True) }}"
        _volume_container_copy: !!null
        _volume_src_stat: !!null
        _volume_dest_mode: !!null
        _volume_mode_file: !!null

- name: docker-volume.push|fail check
  when: not (_volume.pushed | default(false) | bool)
  ansible.builtin.fail:
    msg: "fail volume push"

- name: docker-volume.push|reset _volume
  ansible.builtin.set_fact:
    _volume_info: !!null
    _volume: !!null
