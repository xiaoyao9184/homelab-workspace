---


- block:

    - name: docker-stack.loop|set _stack_loop
      run_once: true
      when: _stack_loop | default(None,true) == None
      vars:
        default_until:
          - stack_loop_info.results is defined
          - stack_loop_info.results | length > 0
        default_fail: []
      ansible.builtin.set_fact:
        _stack_loop:
          name: "{{ stack.name }}"
          task: "{{ stack.task | default(omit) }}"
          retries: "{{ stack.retries | default(1000) }}"
          delay: "{{ stack.delay | default(10) }}"
          until: "{{ stack.until | default(default_until) }}"
          fail: "{{ stack.fail | default(default_fail) }}"

    - name: docker-stack.loop|sleep for first
      when: _stack_retry | default(None,true) == None
      ansible.builtin.pause:
        seconds: "{{ _stack_loop.delay | int }}"

    - name: docker-stack.loop|get stack info
      run_once: true
      delegate_to: "{{ groups['docker-manager'] | first }}"
      community.docker.docker_stack_info:
      register: stack_all_info
      ignore_errors: true

    - name: docker-stack.loop|filter stack info
      run_once: true
      vars:
        list: "{{ stack_all_info.results | default ([],true) | selectattr('Name','equalto',_stack_loop.name) }}"
      ansible.builtin.set_fact:
        stack_loop_info: "{{ (list | first) if (list | length > 0) else None }}"
        stack_all_info: !!null

    - name: docker-stack.loop|print stack_loop_info
      run_once: true
      ansible.builtin.debug:
        var: stack_loop_info

    - name: docker-stack.loop|get stack task
      when: _stack_loop.task is defined
      vars:
        task:
          name: "{{ _stack_loop.name }}"
          type: stack
          result: "{{ _stack_loop.task }}"
      include_tasks: docker-task.set.yml

    - name: docker-stack.loop|until check
      run_once: true
      loop: "{{ _stack_loop.until }}"
      loop_control:
        loop_var: check
      when: "not ( {{ check }} )"
      ansible.builtin.fail:
        msg: "beak loop stack {{ _stack_loop.name }}: {{ check }}"

    - name: docker-stack.loop|reset _stack_retry
      run_once: true
      ansible.builtin.set_fact:
        _stack_retry: !!null
        _stack_loop: !!null

  rescue:

    - name: docker-stack.loop|fail check
      run_once: true
      loop: "{{ _stack_loop.fail }}"
      loop_control:
        loop_var: check
      when: "{{ check }}"
      ansible.builtin.fail:
        msg: "fail loop stack {{ _stack_loop.name }}: {{ check }}"

    - name: docker-stack.loop|init _stack_retry
      run_once: true
      when: _stack_retry | default(None,true) == None
      ansible.builtin.set_fact:
        _stack_retry: "{{ _stack_loop.retries | int }}"

    - name: docker-stack.loop|all retry fail
      run_once: true
      when:
        - (_stack_retry | int) == 0
      ansible.builtin.fail:
        msg: "tired out loop stack {{ _stack_loop.name }}"

    - name: docker-stack.loop|sleep for next loop
      ansible.builtin.pause:
        seconds: "{{ _stack_loop.delay | int }}"
        prompt: "retries {{ _stack_retry }}/{{ _stack_loop.retries }}"

    - name: docker-stack.loop|reduce _stack_retry
      run_once: true
      ansible.builtin.set_fact:
        _stack_retry: "{{ _stack_retry | int - 1 }}"

    - include_tasks: docker-stack.loop.yml
