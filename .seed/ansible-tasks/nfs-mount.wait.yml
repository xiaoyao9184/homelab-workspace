# NOTE
# Need to use the system's nfs client, make sure it is installed

---


- name: nfs-mount.wait|check in docker-seed connect local(docker-in-docker)
  when:
    - lookup('ansible.builtin.env', 'SEED_NAME') != ''
    - ansible_connection == 'local'
  ansible.builtin.set_fact:
    seed_in_docker_connect_local: true

- name: nfs-mount.wait|append list to _mounts
  loop: "{{ mounts if (mounts | type_debug == 'list') else [] }}"
  loop_control:
    loop_var: mount
  vars:
    service: "{{ nfs.service[mount.name] }}"
    server: "{{ service.host if(seed_in_docker_connect_local is defined) else service.addr }}"
    list: "{{ _mounts | default([],true) }}"
    item_default:
      unmount: false
      name: "{{ mount.name }}"
    item_update:
      point: "{{ server }}:{{ mount.point }}"
      mount: "{{ mount.mount }}"
      option: "{{ mount.option }}"
      unmount: "{{ mount.unmount | default(omit) }}"
      retries: "{{ mount.retries | default(omit) }}"
      delay: "{{ mount.delay | default(omit) }}"
    item: "{{ item_default | combine(item_update, recursive=True) }}"
  ansible.builtin.set_fact:
    _mounts: "{{ list + [item] }}"

- name: nfs-mount.wait|append dict to _mounts
  loop: "{{ (mounts | dict2items) if (mounts | type_debug == 'dict') else [] }}"
  loop_control:
    loop_var: kv
  vars:
    service: "{{ nfs.service[kv.key] }}"
    server: "{{ service.host if(seed_in_docker_connect_local is defined) else service.addr }}"
    list: "{{ _mounts | default([],true) }}"
    item_default:
      unmount: false
      name: "{{ kv.key }}"
    item_update:
      point: "{{ server }}:{{ mount.point }}"
      mount: "{{ mount.mount }}"
      option: "{{ mount.option }}"
      unmount: "{{ mount.unmount | default(omit) }}"
      retries: "{{ mount.retries | default(omit) }}"
      delay: "{{ mount.delay | default(omit) }}"
    item: "{{ item_default | combine(item_update, recursive=True) }}"
  ansible.builtin.set_fact:
    _mounts: "{{ list + [item] }}"

- name: nfs-mount.wait|print _mounts
  ansible.builtin.debug:
    var: _mounts

- name: nfs-mount.wait|mkdir nfs mount
  become: true
  loop: "{{ _mounts }}"
  loop_control:
    loop_var: mount
  ansible.builtin.file:
    path: "{{ mount.mount }}"
    state: directory
    mode: 0777

- name: nfs-mount.wait|loop nfs mount
  loop: "{{ _mounts }}"
  loop_control:
    loop_var: mount
  include_tasks: nfs-mount.loop.yml

- name: nfs-mount.wait|rmdir nfs mount
  become: true
  loop: "{{ _mounts }}"
  loop_control:
    loop_var: mount
  when: mount.unmount | default(true) | bool
  ansible.builtin.file:
    path: "{{ mount.mount }}"
    state: absent

- name: nfs-mount.wait|reset _mounts
  ansible.builtin.set_fact:
    _mounts: !!null
