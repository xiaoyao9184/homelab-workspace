---


# NOTE
# Need to use the system's nfs client, make sure it is installed
- name: nfs-mount.wait|list
  when: wait_nfs | type_debug == "list"
  ansible.builtin.set_fact:
    _wait: "{{ wait_nfs }}"

- name: nfs-mount.wait|dict
  when: wait_nfs | type_debug == "dict"
  block:

    - name: nfs-mount.wait|dict to kv list
      ansible.builtin.set_fact:
        _kv_list: "{{ wait_nfs | dict2items }}"

    - name: nfs-mount.wait|kv list to list
      loop: "{{ _kv_list | default([]) }}"
      loop_control:
        loop_var: kv
      vars:
        _item_update:
          name: "{{ kv.key }}"
        item: "{{ kv.value | combine(_item_update, recursive=True) }}"
      ansible.builtin.set_fact:
        _wait: "{{ _wait | default([]) + [item] }}"

    - name: nfs-mount.wait|reset _kv_list
      ansible.builtin.set_fact:
        _kv_list: !!null

- name: nfs-mount.wait|print wait
  ansible.builtin.debug:
    var: _wait

- name: nfs-mount.wait|check in docker-seed connect local(docker-in-docker)
  when: 
    - lookup('ansible.builtin.env', 'SEED_NAME') != ''
    - ansible_connection == 'local'
  ansible.builtin.set_fact:
    seed_in_docker_connect_local: true

- name: nfs-mount.wait|set loop_nfs:use host
  loop: "{{ _wait }}"
  when: seed_in_docker_connect_local is defined
  vars:
    service: "{{ nfs.service[item.name] }}"
    loop_nfs:
      point: "{{ service.host }}:{{ item.point }}"
      mount: "{{ item.mount }}"
      option: "{{ item.option }}"
      unmount: "{{ item.unmount | default(false) }}"
      retry: "{{ item.retry | default(5) }}"
  ansible.builtin.set_fact:
    _loop: "{{ _loop | default([]) + [loop_nfs] }}"

- name: nfs-mount.wait|set loop_nfs:use addr
  loop: "{{ _wait }}"
  when: seed_in_docker_connect_local is undefined
  vars:
    service: "{{ nfs.service[item.name] }}"
    loop_nfs:
      point: "{{ service.addr }}:{{ item.point }}"
      mount: "{{ item.mount }}"
      option: "{{ item.option }}"
      unmount: "{{ item.unmount | default(false) }}"
      retry: "{{ item.retry | default(5) }}"
  ansible.builtin.set_fact:
    _loop: "{{ _loop | default([]) + [loop_nfs] }}"

- name: nfs-mount.wait|print loop
  ansible.builtin.debug:
    var: _loop

- name: nfs-mount.wait|mkdir nfs mount
  become: true
  loop: "{{ _loop }}"
  loop_control:
    loop_var: loop_nfs
  ansible.builtin.file:
    path: "{{ loop_nfs.mount }}"
    state: directory
    # mode: 0777
    # owner: root
    # group: root

- name: nfs-mount.wait|loop nfs mount
  loop: "{{ _loop }}"
  loop_control:
    loop_var: loop_nfs
  include_tasks: nfs-mount.loop.yml

- name: nfs-mount.wait|rmdir nfs mount
  become: true
  loop: "{{ _loop }}"
  loop_control:
    loop_var: loop_nfs
  when: loop_nfs.unmount | default(true) | bool
  ansible.builtin.file:
    path: "{{ loop_nfs.mount }}"
    state: absent

- name: nfs-mount.wait|reset _wait
  ansible.builtin.set_fact:
    _loop: !!null
    _wait: !!null
