---


- name: docker-compose.add|set _compose
  vars:
    default_path: "{{ dir.remote }}"
  ansible.builtin.set_fact:
    _compose:
      name: "{{ compose.name }}"
      path: "{{ compose.path | default(default_path,true) }}"
      files: "{{ compose.files | default([]) }}"

- name: docker-compose.add|set _compose.type
  vars:
    update:
      type: "{{ compose.type | default('compose',true) }}"
  ansible.builtin.set_fact:
    _compose: "{{ _compose | combine(update, recursive=True) }}"

- when: compose.template is defined
  block:

    - name: docker-compose.add|set template option
      vars:
        run_once: "{{ _compose.type == 'stack' }}"
        delegate_to: "{{ ( groups['docker-manager'] | first ) if (_compose.type == 'stack') else omit }}"
      ansible.builtin.set_fact:
        _template_opt:
          run_once: "{{ run_once }}"
          delegate_to: "{{ delegate_to }}"

    - name: docker-compose.add|one template
      when: compose.template | type_debug == "dict"
      ansible.builtin.set_fact:
        _template_list: "{{ [ compose.template ] }}"

    - name: docker-compose.add|multiple template
      when:
        - compose.template | type_debug == "list"
      ansible.builtin.set_fact:
        _template_list: "{{ compose.template }}"

    - name: docker-compose.add|template file
      run_once: "{{ _template_opt.run_once | default(false) }}"
      delegate_to: "{{ _template_opt.delegate_to | default(omit) }}"
      loop: "{{ _template_list }}"
      loop_control:
        loop_var: _template_item
      vars:
        # why see https://stackoverflow.com/questions/50477012/how-to-use-a-dictionary-of-registered-ansible-variables-in-vars
        VARS: "{{ _template_item.vars }}"
      ansible.builtin.template: "{{ _template_item.opt }}"

    - name: docker-compose.rm|set _template_files
      ansible.builtin.set_fact:
        _template_files: []

    - name: docker-compose.add|add template file
      loop: "{{ _template_list }}"
      loop_control:
        loop_var: _template_item
      vars:
        file: "{{ _template_item.name }}.yml"
      ansible.builtin.set_fact:
        _template_files: "{{ _template_files + [file] }}"

    - name: docker-compose.add|combine _compose.files
      vars:
        update:
          files: "{{ _compose.files + _template_files }}"
      ansible.builtin.set_fact:
        _compose: "{{ _compose | combine(update, recursive=True) }}"

    - name: docker-compose.add|reset _template
      ansible.builtin.set_fact:
        _template_files: !!null
        _template_list: !!null
        _template_opt: !!null

- when: _compose.type == 'stack'
  block:

    - name: docker-compose.add|print _compose
      run_once: true
      delegate_to: "{{ groups['docker-manager'] | first }}"
      ansible.builtin.debug:
        var: _compose

    - name: docker-compose.add|add stack
      run_once: true
      delegate_to: "{{ groups['docker-manager'] | first }}"
      community.docker.docker_stack:
        state: present
        name: "{{ _compose.name }}"
        compose: "{{ [_compose.path] | product(_compose.files) | map('join', '/') }}"

- when: _compose.type == 'compose'
  block:

    - name: docker-compose.add|print _compose
      ansible.builtin.debug:
        var: _compose

    - name: docker-compose.add|add compose
      community.docker.docker_compose:
        state: present
        project_name: "{{ _compose.name }}"
        project_src: "{{ _compose.path }}"
        files: "{{ _compose.files }}"

- name: docker-compose.add|reset _compose
  ansible.builtin.set_fact:
    _compose: !!null
