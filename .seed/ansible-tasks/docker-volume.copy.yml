---


- name: docker-volume.copy|not loop
  when: volume.key is undefined
  block:

    - name: docker-volume.copy|set _vol _copy from volume
      vars:
        vol_keys: ['name']
        vol_values: "{{ vol_keys | map('extract', volume) | list }}"
        cp_keys: "{{ volume.keys() | difference(vol_keys) }}"
        cp_values: "{{ cp_keys | map('extract', volume) | list }}"
      ansible.builtin.set_fact:
        _vol: "{{ dict(vol_keys | zip(vol_values)) }}"
        _copy: "{{ dict(cp_keys | zip(cp_values)) }}"

- name: docker-volume.copy|in loop
  when: volume.key is defined
  block:

    - name: docker-volume.copy|set _vol _copy from volume.key volume.value
      ansible.builtin.set_fact:
        _vol:
          name: "{{ volume.key }}"
        _copy: "{{ volume.value | default({},true) }}"

- name: docker-volume.copy|print volume
  ansible.builtin.debug:
    var: _vol

- name: docker-volume.copy|print copy
  ansible.builtin.debug:
    var: _copy

- name: docker-volume.copy|get volume info
  community.docker.docker_volume_info:
    name: "{{ _vol.name }}"
  register: _vol_info

- name: docker-volume.copy|print volume info
  ansible.builtin.debug:
    var: _vol_info

- name: docker-volume.copy|copy to volume direct by bind
  when:
    - _vol_info.exists
    - _vol_info.volume.Driver | default('NONE') == 'local'
    - _vol_info.volume.Options.type | default('NONE') == 'none'
    - _vol_info.volume.Options.o | default('NONE') == 'bind'
  block:

    - name: docker-volume.copy|set copy to volume bind device
      vars:
        _copy_update:
          dest: "{{ _vol_info.volume.Options.device }}/{{ _copy.dest }}"
      ansible.builtin.set_fact:
        _copy: "{{ _copy | combine(_copy_update, recursive=True) }}"

    - name: docker-volume.copy|print copy
      ansible.builtin.debug:
        var: _copy

    - name: docker-volume.copy|copy bind
      ansible.builtin.copy: "{{ _copy }}"

    - name: docker-volume.copy|reset _copy
      ansible.builtin.set_fact:
        _copy: !!null
        _copy_done: true

- name: docker-volume.copy|copy to volume by container
  when:
    - _vol_info.exists
    - not (_copy_done | default(false) | bool)
  block:

    - when: _copy.remote_src | default(false) | bool
      block:

        - name: docker-volume.copy|set docker cp from remote src
          ansible.builtin.set_fact:
            _copy_docker:
              src: "{{ _copy.src }}/."
              dest: "/seed_vol/{{ _copy.dest }}"

    - when: not ( _copy.remote_src | default(false) | bool )
      block:

        - name: docker-volume.copy|set temporary path by remote dir or workspace
          ansible.builtin.set_fact:
            _copy_temp_path: "{{ dir.remote | default(ws.remote) }}/.vol/{{ _vol.name }}"

        - debug: msg="{{ _copy_temp_path }}" verbosity=3

        - name: docker-volume.copy|create temporary path
          ansible.builtin.file:
            path: "{{ _copy_temp_path }}"
            state: directory

        - name: docker-volume.copy|empty temporary path
          ansible.builtin.file:
            path: "{{ _copy_temp_path }}/"
            state: absent

        - name: docker-volume.copy|set temporary copy from temporary path
          vars:
            _copy_update:
              dest: "{{ _copy_temp_path }}"
          ansible.builtin.set_fact:
            _copy_temp: "{{ _copy | combine(_copy_update, recursive=True) }}"

        - name: docker-volume.copy|print temporary copy
          ansible.builtin.debug:
            var: _copy_temp

        - name: docker-volume.copy|copy temporary
          ansible.builtin.copy: "{{ _copy_temp }}"

        - name: docker-volume.copy|set docker cp from temporary path
          ansible.builtin.set_fact:
            _copy_docker:
              src: "{{ _copy_temp_path }}/."
              dest: "/seed_vol/{{ _copy.dest }}"

        - name: docker-volume.copy|reset _copy_temp
          ansible.builtin.set_fact:
            _copy_temp_path: !!null
            _copy_temp: !!null

    - name: docker-volume.copy|print docker cp
      ansible.builtin.debug:
        var: _copy_docker

    - name: docker-volume.copy|start copy container
      community.docker.docker_container:
        name: "{{ _vol.name }}"
        state: started
        image: alpine
        command: "tail -f /dev/null"
        volumes:
          - "{{ _vol.name }}:/seed_vol"
        labels:
          "com.docker.stack.namespace": seed
          "com.github.xiaoyao9184.docker-seed.type": "docker-volume.copy"
          "com.github.xiaoyao9184.docker-seed.creator": "{{ lookup('ansible.builtin.env', 'SEED_NAME') | default('docker-volume.copy',true) }}"
      register: result_vol_container
      until: "result_vol_container is not failed"
      retries: 1000
      delay: 10

    - name: docker-volume.copy|copy to container
      ansible.builtin.shell: "docker cp {{ _copy_docker.src }} {{ _vol.name }}:/{{ _copy_docker.dest }}"

    - name: docker-volume.copy|stop copy container
      community.docker.docker_container:
        name: "{{ _vol.name }}"
        state: stopped

    - name: docker-volume.copy|reset _copy_docker
      ansible.builtin.set_fact:
        _copy_docker: !!null
        _copy_done: true

- name: docker-volume.copy|reset _vol
  ansible.builtin.set_fact:
    _copy_done: !!null
    _copy: !!null
    _vol_info: !!null
    _vol: !!null
