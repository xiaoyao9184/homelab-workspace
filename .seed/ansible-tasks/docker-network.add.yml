# Some driver of network must delegate_to to run on docker-manager
---

- name: docker-network.add|list loop
  when: network.key is undefined
  block:

    - name: docker-network.add|set _net from network
      ansible.builtin.set_fact:
        _net: "{{ network }}"
        # BUG? When different variable in loop include_tasks, run_once set_fact will set all host fact
        _nets_manager: []

- name: docker-network.add|dict loop
  when: network.key is defined
  block:

    - name: docker-network.add|set _net from network.value
      ansible.builtin.set_fact:
        _net: "{{ network.value | default({},true) }}"
        # BUG? When different variable in loop include_tasks, run_once set_fact will set all host fact
        _nets_manager: []

    - name: docker-network.add|combine _net.name form network.key
      vars:
        update:
          name: "{{ network.key }}"
      when: _net.name is undefined
      ansible.builtin.set_fact:
        _net: "{{ _net | combine(update, recursive=True) }}"

- name: docker-network.add|combine _net.labels form default
  vars:
    update:
      labels:
        "com.docker.stack.namespace": seed
        "com.github.xiaoyao9184.docker-seed.type": "docker-network.add"
        "com.github.xiaoyao9184.docker-seed.creator": "{{ lookup('ansible.builtin.env', 'SEED_NAME') | default('docker-network.add',true) }}"
  ansible.builtin.set_fact:
    _net: "{{ _net | combine(update, recursive=True) }}"

- when: _net.ipam is defined
  block:

    - name: docker-network.add|rename ipam_config attr
      when: _net.ipam.config is defined
      include_tasks: list-attr.rename.yml
      vars:
        attr:
          old: ip_range
          new: iprange
          list: "{{ _net.ipam.config }}"
          result_var: _net_ipam

    - name: docker-network.add|reset ipam_*
      vars:
        update:
          ipam_driver: "{{ _net.ipam.driver | default('default') }}"
          ipam_driver_options: "{{ _net.ipam.options | default({}) }}"
          ipam_config: "{{ _net_ipam | default([]) }}"
      ansible.builtin.set_fact:
        _net: "{{ _net | combine(update, recursive=True) }}"

- block:

    - name: docker-network.add|set _net_scope by overlay driver
      when:
        - _net.driver is defined
        - _net.driver == 'overlay'
      ansible.builtin.set_fact:
        _net_scope: swarm

    - name: docker-network.add|set _net_scope by swarm scope
      when:
        - _net.scope is defined
        - _net.scope == 'swarm'
      ansible.builtin.set_fact:
        _net_scope: swarm

- when: _net_scope | default('',true) != 'swarm'
  block:

    - name: docker-network.add|print network
      ansible.builtin.debug:
        var: _net

    - name: docker-network.add|create network
      community.docker.docker_network:
        name: "{{ _net.name }}"
        driver: "{{ _net.driver | default('bridge') }}"
        driver_options: "{{ _net.driver_opts | default({}) }}"
        attachable: "{{ _net.attachable | default(true) }}"
        labels: "{{ _net.labels }}"
        enable_ipv6: "{{ _net.enable_ipv6 | default(false) }}"
        ipam_driver: "{{ _net.ipam_driver | default(none) }}"
        ipam_driver_options: "{{ _net.ipam_driver_options | default({}) }}"
        ipam_config: "{{ _net.ipam_config | default([]) }}"
        internal: "{{ _net.internal | default(false) }}"

- when: _net_scope | default('',true) == 'swarm'
  block:

    # Merge multiple docker nodes '_net' variables when is swarm network
    - name: docker-network.add|append swarm _nets_manager from each docker host
      run_once: true
      loop: "{{ groups['docker'] }}"
      loop_control:
        loop_var: hostitem
      vars:
        list: "{{ _nets_manager | default([],true) }}"
        append: "{{ [hostvars[hostitem]._net] if (hostvars[hostitem]._net | default(None,true) != None) else [] }}"
      ansible.builtin.set_fact:
        _nets_manager: "{{ (list + append) | unique }}"

    - name: docker-network.add|print swarm network
      run_once: true
      ansible.builtin.debug:
        var: _nets_manager

    - name: docker-network.add|create swarm network
      run_once: true
      delegate_to: "{{ groups['docker-manager'] | first }}"
      loop: "{{ _nets_manager }}"
      loop_control:
        loop_var: net
      community.docker.docker_network:
        name: "{{ net.name }}"
        driver: "{{ net.driver | default('bridge') }}"
        driver_options: "{{ net.driver_opts | default({}) }}"
        attachable: "{{ net.attachable | default(true) }}"
        labels: "{{ net.labels }}"
        enable_ipv6: "{{ net.enable_ipv6 | default(false) }}"
        ipam_driver: "{{ net.ipam_driver | default(none) }}"
        ipam_driver_options: "{{ net.ipam_driver_options | default({}) }}"
        ipam_config: "{{ net.ipam_config | default([]) }}"
        internal: "{{ net.internal | default(false) }}"

- name: docker-network.add|reset _net
  ansible.builtin.set_fact:
    _net: !!null
    _net_ipam: !!null
    _net_scope: !!null
    _nets_manager: !!null
