---

- name: deploy
  vars:
    run_wsl: |
      ansible-playbook \
        --inventory $PWD/ansible-inventories \
        $PWD/../../../openwrt/tailscale/ansible-playbook.deploy.yml
  hosts: openwrt
  roles:
    - gekmihesg.openwrt
  tasks:

    - name: check fw4
      ansible.builtin.shell: command -v fw4
      register: opkg_fw4

    - when: opkg_fw4.stdout != ''
      block:

        - name: opkg iptables-nft
          opkg:
            name: iptables-nft
          ignore_errors: yes

    - when: tailscale.install | default('opkg') == 'opkg'
      block:

        - name: opkg tailscale
          opkg:
            update_cache: true
            name: tailscale
          ignore_errors: yes

    - when: tailscale.install | default('opkg') == 'enabler'
      block:

        - name: get arch
          ansible.builtin.shell: uname -m
          register: arch_result

        - name: get endianness
          when: arch_result.stdout == 'mips'
          ansible.builtin.shell: |
              echo -n I | hexdump -o | awk '{ print (substr($2,6,1)=="1") ? "le" : ""; exit }'
          register: endianness_result

        - name: set pkg_arch mips
          delegate_to: localhost
          delegate_facts: true
          when: arch_result.stdout == 'mips'
          ansible.builtin.set_fact:
            pkg_arch: "mips{{ endianness_result.stdout }}"

        - name: set pkg_arch arm
          delegate_to: localhost
          delegate_facts: true
          when: arch_result.stdout == 'armv7l'
          ansible.builtin.set_fact:
            pkg_arch: arm

        - name: set pkg_arch arm64
          delegate_to: localhost
          delegate_facts: true
          when: arch_result.stdout == 'aarch64'
          ansible.builtin.set_fact:
            pkg_arch: arm64

        - name: set pkg_arch amd64
          delegate_to: localhost
          delegate_facts: true
          when: arch_result.stdout == 'x86_64'
          ansible.builtin.set_fact:
            pkg_arch: amd64

        - name: set tailscale
          delegate_to: localhost
          delegate_facts: true
          ansible.builtin.set_fact:
            tailscale: "{{ tailscale }}"


- name: download
  hosts: localhost
  connection: local
  tasks:

    - when: tailscale.install | default('opkg') == 'enabler'
      block:

        - name: get enabler latest release
          ansible.builtin.uri:
            url: "https://api.github.com/repos/adyanth/openwrt-tailscale-enabler/releases/latest"
            return_content: true
          register: json_reponse

        - name: set enabler_version pkg_version
          vars:
            regex_hash_suffix: '-\w{7}-.*'
            regex_version_prefix: '^v'
            version: "{{ json_reponse.json.name | regex_replace(regex_hash_suffix,'') | regex_replace(regex_version_prefix,'') }}"
          ansible.builtin.set_fact:
            enabler_version: "{{ json_reponse.json.name }}"
            pkg_version: "{{ version }}_{{ pkg_arch }}"

        - name: set extract_dir
          ansible.builtin.set_fact:
            enabler_download_assets: "~/.openwrt/openwrt-tailscale-enabler-{{ enabler_version }}.tgz"
            enabler_extract_dir: "~/.openwrt/openwrt-tailscale-enabler-{{ enabler_version }}"
            pkg_download_assets: "~/.openwrt/tailscale_{{ pkg_version }}.tgz"
            pkg_extract_dir: "~/.openwrt/tailscale_{{ pkg_version }}"

        - name: mkdir extract_dir
          loop:
            - "{{ enabler_extract_dir }}"
            - "{{ pkg_extract_dir }}"
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory

        - name: stat enabler assets
          ansible.builtin.stat:
            path: "{{ enabler_download_assets }}"
          register: stat_enabler

        - name: download enabler assets
          when: not stat_enabler.stat.exists
          ansible.builtin.get_url:
            url: "{{ github.url_prefix | default('') }}{{ json_reponse.json.assets[0].browser_download_url }}"
            dest: "{{ enabler_download_assets }}"

        - name: extract enabler assets
          ansible.builtin.unarchive:
            src: "{{ enabler_download_assets }}"
            dest: "{{ enabler_extract_dir }}"

        - name: stat pkg assets
          ansible.builtin.stat:
            path: "{{ pkg_download_assets }}"
          register: stat_pkg

        - name: download pkg assets
          when: not stat_pkg.stat.exists
          ansible.builtin.get_url:
            url: "https://pkgs.tailscale.com/stable/tailscale_{{ pkg_version }}.tgz"
            dest: "{{ pkg_download_assets }}"

        - name: extract pkg assets
          ansible.builtin.unarchive:
            src: "{{ pkg_download_assets }}"
            dest: "{{ pkg_extract_dir }}"

        - name: set copy_dir
          ansible.builtin.set_fact:
            copy_dir: "{{ enabler_extract_dir }}"

        - name: mkdir pkg in copy_dir
          ansible.builtin.file:
            path: "{{ copy_dir }}/tmp"
            state: directory

        - name: copy pkg to copy_dir
          loop:
            - "tailscale"
            - "tailscaled"
          ansible.builtin.copy:
            src: "{{ pkg_extract_dir }}/tailscale_{{ pkg_version }}/{{ item }}"
            dest: "{{ copy_dir }}/tmp/{{ item }}"


- name: deploy
  hosts: openwrt
  roles:
    - gekmihesg.openwrt
  tasks:

    - when: tailscale.install | default('opkg') == 'enabler'
        # - opkg_tailscale is failed
        # - hostvars[groups['openwrt'][0]]['tailscale']['install'] | default('opkg') != 'opkg'
      block:

        - name: opkg install
          loop:
            - jq
            - libustream-openssl
            - ca-bundle
            - kmod-tun
          opkg:
            update_cache: true
            name: "{{ item }}"
          ignore_errors: yes

        - name: copy file
          ansible.builtin.copy:
            src: "{{ hostvars['localhost']['copy_dir'] }}/"
            dest: /
            mode: '0755'

        - name: start service
          ansible.builtin.shell: /etc/init.d/tailscale start

        - name: enable service
          ansible.builtin.shell: /etc/init.d/tailscale enable

        - name: ls service
          ansible.builtin.shell: ls /etc/rc.d/S*tailscale*
          register: service_rc

    - name: get lan network
      ansible.builtin.shell: "ip route | grep src | grep br-lan | awk '{print $1}'"
      register: network_lan

    - name: authkey tailscale up
      when: tailscale.up.authkey is defined
      ansible.builtin.set_fact:
        shell_tailscale: "tailscale up --authkey {{ tailscale.up.authkey }} --advertise-routes={{ network_lan.stdout }} --advertise-exit-node &> /tmp/tailscale.up.log"

    - name: default tailscale up
      when: tailscale.up.authkey is undefined
      ansible.builtin.set_fact:
        shell_tailscale: "tailscale up --advertise-routes={{ network_lan.stdout }} --advertise-exit-node &> /tmp/tailscale.up.log"

    - name: async up tailscale
      ansible.builtin.shell: "{{ shell_tailscale }}"
      register: async_shell
      # 60*60*24*30 â€“ 1 month
      async: 2592000
      poll: 0

    - name: sheep 5 seconds
      ansible.builtin.pause:
        seconds: 5

    - name: check tailscale async status
      ansible.builtin.async_status:
        jid: "{{ async_shell.ansible_job_id }}"
      register: tailscale_async

    - name: check tailscale stdout stat
      ansible.builtin.stat:
        path: /tmp/tailscale.up.log
      register: tailscale_log

    - name: check tailscale stdout finished
      when:
        - not tailscale_async.finished
        - tailscale_log.stat.exists
      ansible.builtin.shell: "grep -i 'http' /tmp/tailscale.up.log"
      register: grep_stdout
      until: grep_stdout.rc == 0
      # 30 day 1 month
      retries: 259200
      delay: 10

    - name: read stdout content
      when:
        - tailscale_log.stat.exists
      ansible.builtin.shell: "cat /tmp/tailscale.up.log"
      register: content_stdout

    - name: print stdout content
      when:
        - tailscale_log.stat.exists
      ansible.builtin.pause:
        seconds: 1
        prompt: |
          {{ content_stdout.stdout }}

    - name: check stdout status
      ansible.builtin.async_status:
        jid: "{{ async_shell.ansible_job_id }}"
      register: status_stdout
      until: status_stdout.finished
      # 10 min
      retries: 60
      delay: 10

    - name: clear stdout file
      ansible.builtin.file:
        path: "/tmp/tailscale.up.log"
        state: absent

    - name: get tailscale network
      ansible.builtin.shell: "ip addr show tailscale0 | grep 'inet ' | awk '{print $2}'"
      register: network_tailscale

    - name: print result
      debug:
        msg:
          - "{{ service_rc }}"
          - "{{ network_lan }}"
          - "{{ network_tailscale }}"

    - name: uci add tailscale.tailscale
      uci:
        command: set
        key: network.tailscale
        value: interface

    - name: uci set network.tailscale
      uci:
        command: set
        key: network.tailscale
        value:
          proto: 'static'
          device: 'tailscale0'

    - name: uci add_list network.tailscale
      uci:
        command: add_list
        key: network.tailscale.ipaddr
        value: "{{ network_tailscale.stdout }}"

    - name: uci commit network
      uci:
        command: commit
        key: network

    - name: uci add firewall.tszone
      uci:
        command: set
        key: firewall.tszone
        value: zone

    - name: uci set firewall.tszone
      uci:
        command: set
        key: firewall.tszone
        value:
          input: 'ACCEPT'
          output: 'ACCEPT'
          name: 'tailscale'
          masq: '1'
          forward: 'ACCEPT'
          network: 'tailscale'
          device: 'tailscale0'

    - name: uci add firewall.lanfwts
      uci:
        command: set
        key: firewall.lanfwts
        value: forwarding

    - name: uci set firewall.lanfwts
      uci:
        command: set
        key: firewall.lanfwts
        value:
          src: 'lan'
          dest: 'tailscale'

    - name: uci add firewall.tsfwlan
      uci:
        command: set
        key: firewall.tsfwlan
        value: forwarding

    - name: uci set firewall.tsfwlan
      uci:
        command: set
        key: firewall.tsfwlan
        value:
          src: 'tailscale'
          dest: 'lan'

    - name: uci commit firewall
      uci:
        command: commit
        key: firewall